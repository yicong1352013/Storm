{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": "2008-10-03T02:04:36.63-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "Hi namigop,\n \nstumbled upon storm when I looked for a replacement to the excellent web services studio 2.0 since the code for that wasn't released and I needed something extensible.  \nYour program is really good but its written in F# which look really nice to learn but its pretty intimidating for a c# developers.\nAnyways, If the target webservice has nullable fields (default for dates in java/axis and very possible in .Net)  Storm will crash.\nbeing the absolute F# noob  that I am  I simply hacked it where it crashed:\nso I added\n \n         let (myObjH:obj) = \n          if myObjH = null then  cast DateTime.Now\n          else myObjH\n \nright below \n \n      let rec readType  (myObjH:obj) (parentNode:TreeNode) (name:string)=       \n         let parentClone:TreeNode = cast  (parentNode.Clone())\n         \n         \n Of course this means that I knew that all of nullable fields will be datetimes...\n \nI'm still trying to figure out f# if I will, I'll submit a full fix.",
    "LastUpdatedDate": "2013-05-16T03:46:31.1-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "storm",
    "ReportedDate": "2008-08-11T07:43:34.503-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Nullable fields cause Storm to crash",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 2,
    "Id": 2042
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Hi idanush,\r\n\r\n    We're both F# noobs :) I'm also learning F# which is why I wrote Storm.  Although lately (last few months) I haven't been able to do F# coding because I've been busy working on an integration project at work.  \r\n\r\n    Thanks for reporting the issue.  This is definitely a bug because before the myObjH object reaches the recursive \"readType\" function it should have been assigned a value if it was null (this is done in \"createInstanceFromType\" function). Can you please send me some instructions on how to recreate this in .NET?  Thanks.\r\n",
      "PostedDate": "2008-08-18T20:38:23.263-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2008-09-20T00:27:25.207-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Just make a WebMethod in a webservice that takes in some value type with ?.  I.e.\r\n\r\n        [WebMethod]\r\n        public int HelloNillableWorld(int? nillableNumber)\r\n        {\r\n            return nillableNumber;\r\n        }\r\n\r\nPoint STORM (or WebServiceStudio FWIW) at the webservice and when you click on that particular function you'll get some exception code.",
      "PostedDate": "2008-09-20T00:40:12.65-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Hi,\r\n     Thanks I've fixed it now.  I've also fixed a related issue (STORM is sending an instance of a class with default values even if in the in the Editor the \"IsNull\" field was set to true).\r\n\r\n     Basically the fix is to \r\n       1. add a new \"MyNullable\" type to InstanceTypes and then populate this with default value using the type retrieved from System.Nullable.GetUnderlyingType(someNullableType)\r\n       2. make createInstanceFromType recursive\r\n\r\n     let rec createInstanceFromType (thisType : Type) : InstanceTypes =\r\n         match thisType with\r\n         <.. snip ..>\r\n         | _ when thisType.FullName.StartsWith(\"System.Nullable\") ->\r\n               Nullable.GetUnderlyingType(thisType) |> createInstanceFromType |> getInnerValueOf |> MyNullable\r\n        \r\n       and when building the object array parameters to the web service (fix for the related issue) we just check for the modified value\r\n\r\n      let arr = \r\n            methodParams \r\n            |> ResizeArray.map (fun (n,objInstance) -> objInstance) \r\n            |> ResizeArray.map(fun x ->\r\n                 match (unbox<TreeNodeTag> x) with\r\n                 | t when t.ModifiedValue = None -> null //this is the fix.\r\n                 | t -> t.OriginalValue |> Option.get )\r\n                 \r\n\r\n       Thanks for reporting the bug.  The fix should be out in the next release.\r\n\r\n~ Erik\r\n  \r\n      ",
      "PostedDate": "2008-09-21T20:53:03.02-07:00",
      "Id": -2147483648
    },
    {
      "Message": "In case you'll have a look at the source, I've modified (again... :(  )\r\n\r\n ResizeArray.map(fun x ->\r\n    match (unbox<TreeNodeTag> x) with\r\n    | t when t.ModifiedValue = None -> null //this is the fix.\r\n    | t -> t.OriginalValue |> Option.get )\r\n\r\nto\r\n\r\nResizeArray.map(fun x ->\r\n    match (unbox<TreeNodeTag> x) with\r\n     | t ->\r\n             match t.ModifiedValue with\r\n             | Some(v) -> v\r\n             | None -> null )",
      "PostedDate": "2008-09-21T22:07:16.82-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2008-09-21T22:07:17.62-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2008-10-03T02:04:36.63-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T15:39:54.793-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-05-16T03:46:31.1-07:00",
      "Id": -2147483648
    }
  ]
}