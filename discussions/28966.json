[
  {
    "Id": "96517",
    "ThreadId": "28966",
    "Html": "My compliments to you. This is an excellent start to a very worthwhile project and I believe it could be expanded to support some of the basic functionality of commercial SOAP/WS testing suites available from vendors like Parasoft and Crosscheck.<br>\r\n<br>\r\nId like to make a few suggestions which would make Storm immediately more useful (in my desired development order):<br>\r\n1) If an elements/attribute minOccurance == 0, allow specification (checkbox) to include the element/attribute or not, instead of just setting to null. This will allow for testing valid &amp; invalid requests.<br>\r\n2) If an element/attribute is an array, allow addition of multiple values.<br>\r\n3) Ability to populate a byte[] by reading bytes from a file<br>\r\n4) Ability to open saved requests (currently allows saving).<br>\r\n5) Better synchronization between &quot;treeview&quot; and Raw/XML view. Currently, the Raw/XML is only updated when you hit send. <br>\r\n6) Ability to save/open multiple requests &quot;sets&quot;.<br>\r\n7) Same as 4,6 for responses with added ability to check a request &quot;set&quot; against a saved response &quot;set&quot; (test cases).<br>\r\n<br>\r\nI will be looking at the source asap :)<br>\r\n<br>\r\n",
    "PostedDate": "2008-06-03T09:08:37.503-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "97805",
    "ThreadId": "28966",
    "Html": "Thanks for creating such a nice product. <br>\r\n<br>\r\nI have a method in a WCF service that returns a complex type. The STORM is able to pull the name of that method but when I double click it so that I can see the generated request it gives me the following error:<br>\r\n<br>\r\n<span style=\"font-size:10px;color:#ff0000\">\r\n<p>System.NullReferenceException: Object reference not set to an instance of an object.</p>\r\n<p>at System.Object.GetType()</p>\r\n<p>at Storm.Types.ReflectionOps.readType(Object myObjH, TreeNode parentNode, String name)</p>\r\n<p>at Storm.Types.ReflectionOps.createChildrenTree@115@115(FastFunc`2 readType@115, List`1 fList, Object parentObj, List`1 trList)</p>\r\n<p>at Storm.Types.ReflectionOps.readType(Object myObjH, TreeNode parentNode, String name)</p>\r\n<p>at Storm.UI.Forms.FormMainOps.bodyNodeChildren@584.Invoke(Tuple`3 arg@583)</p>\r\n<p>at Microsoft.FSharp.Collections.PrivateListHelpers.map[T,U](FastFunc`2 f, List`1 x)</p>\r\n<p>at Storm.UI.Forms.FormMainOps.buildTreeViewInput$cont@528@528(TreeViewEventArgs args@528, String wsUrl@528, Option`1 thisWebServiceOpt@528)</p>\r\n<p>at Storm.UI.Forms.FormMainOps.clo@604.Invoke(TreeViewEventArgs args)</p>\r\n<p>at Microsoft.FSharp.Collections.PrivateListHelpers.iter[T](FastFunc`2 f, List`1 x)</p>\r\n<p>at Microsoft.FSharp.Control.IEventModule.create@18.Invoke(A x)</p>\r\n<p>at Microsoft.FSharp.Collections.PrivateListHelpers.iter[T](FastFunc`2 f, List`1 x)</p>\r\n<p>at Microsoft.FSharp.Control.IEventModule.create@18.Invoke(A x)</p>\r\n<p>at Storm.UI.Forms.FormMainOps.tvWebService_webMethodNode_AfterSelect_Event@318_1.Invoke(Object sender, TreeViewEventArgs e)</p>\r\n<p>at System.Windows.Forms.TreeViewEventHandler.Invoke(Object sender, TreeViewEventArgs e)</p>\r\n<p>at System.Windows.Forms.TreeView.OnAfterSelect(TreeViewEventArgs e)</p>\r\n<p>at System.Windows.Forms.TreeView.TvnSelected(NMTREEVIEW* nmtv)</p>\r\n<p>at System.Windows.Forms.TreeView.WmNotify(Message&amp; m)</p>\r\n<p>at System.Windows.Forms.TreeView.WndProc(Message&amp; m)</p>\r\n<p>at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message&amp; m)</p>\r\n<p>at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message&amp; m)</p>\r\n<p>at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)</p>\r\n</span>\r\n",
    "PostedDate": "2008-06-09T15:02:43.423-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "98065",
    "ThreadId": "28966",
    "Html": "Hi rxraza,<br>\r\n<br>\r\nHave you tried this out with the most recent release (Storm 0.3.0)?  If  it still doesn't work can you please send me a stub of your WCF service so I can test it? <br>\r\n<br>\r\n~Erik<br>\r\n<div style=\"border-top-color:#aaaaaa;border-left-color:#aaaaaa;border-right-color:#aaaaaa;border-bottom-color:#aaaaaa;border-top-width:0.10em;border-left-width:0.10em;border-right-width:0.10em;border-bottom-width:0.10em;border-top-style:dotted;border-left-style:dotted;border-right-style:dotted;border-bottom-style:dotted;border-left-color:#000000;border-left-width:medium;border-left-style:none;border-right-color:#000000;border-right-width:medium;border-right-style:none;font-style:italic;margin-top:1em;margin-right:0em;margin-bottom:2.50em;margin-left:3em;padding-top:0.20em;padding-right:0.20em;padding-bottom:0.20em;padding-left:0.20em\"><br>\r\nrxraza wrote:<br>\r\nThanks for creating such a nice product. <br>\r\n<br>\r\nI have a method in a WCF service that returns a complex type. The STORM is able to pull the name of that method but when I double click it so that I can see the generated request it gives me the following error:<br>\r\n<br>\r\n<span style=\"font-size:10px;color:#ff0000\">\r\n<p>System.NullReferenceException: Object reference not set to an instance of an object.</p>\r\n<p>at System.Object.GetType()</p>\r\n<p>at Storm.Types.ReflectionOps.readType(Object myObjH, TreeNode parentNode, String name)</p>\r\n<p>at Storm.Types.ReflectionOps.createChildrenTree@115@115(FastFunc`2 readType@115, List`1 fList, Object parentObj, List`1 trList)</p>\r\n<p>at Storm.Types.ReflectionOps.readType(Object myObjH, TreeNode parentNode, String name)</p>\r\n<p>at Storm.UI.Forms.FormMainOps.bodyNodeChildren@584.Invoke(Tuple`3 arg@583)</p>\r\n<p>at Microsoft.FSharp.Collections.PrivateListHelpers.map[T,U](FastFunc`2 f, List`1 x)</p>\r\n<p>at Storm.UI.Forms.FormMainOps.buildTreeViewInput$cont@528@528(TreeViewEventArgs args@528, String wsUrl@528, Option`1 thisWebServiceOpt@528)</p>\r\n<p>at Storm.UI.Forms.FormMainOps.clo@604.Invoke(TreeViewEventArgs args)</p>\r\n<p>at Microsoft.FSharp.Collections.PrivateListHelpers.iter[T](FastFunc`2 f, List`1 x)</p>\r\n<p>at Microsoft.FSharp.Control.IEventModule.create@18.Invoke(A x)</p>\r\n<p>at Microsoft.FSharp.Collections.PrivateListHelpers.iter[T](FastFunc`2 f, List`1 x)</p>\r\n<p>at Microsoft.FSharp.Control.IEventModule.create@18.Invoke(A x)</p>\r\n<p>at Storm.UI.Forms.FormMainOps.tvWebService_webMethodNode_AfterSelect_Event@318_1.Invoke(Object sender, TreeViewEventArgs e)</p>\r\n<p>at System.Windows.Forms.TreeViewEventHandler.Invoke(Object sender, TreeViewEventArgs e)</p>\r\n<p>at System.Windows.Forms.TreeView.OnAfterSelect(TreeViewEventArgs e)</p>\r\n<p>at System.Windows.Forms.TreeView.TvnSelected(NMTREEVIEW* nmtv)</p>\r\n<p>at System.Windows.Forms.TreeView.WmNotify(Message&amp; m)</p>\r\n<p>at System.Windows.Forms.TreeView.WndProc(Message&amp; m)</p>\r\n<p>at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message&amp; m)</p>\r\n<p>at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message&amp; m)</p>\r\n<p>at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)</p>\r\n</span><br>\r\n<br>\r\n</div>\r\n<br>\r\n",
    "PostedDate": "2008-06-10T19:25:52.323-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "98067",
    "ThreadId": "28966",
    "Html": "Hi Enliven,<br>\r\n<br>\r\nThank you for your requests! I agree that  the tool should include those features.  <br>\r\n<ul>\r\n    <li>With regards to requests #1 &amp; #2, for the moment you can achieve these by directly editing the Raw soap request (&quot;RAW view&quot;).</li>\r\n    <li>Request #4 should be covered by the latest release (soap requests saved as an input in test case is re-loaded as part of a storm project).\r\n    <li>Request #5 is actually an old bug I haven't figured out how to fix yet.  I still have to find a way to deserialize the RAW soap request so that in can be displayed in the treeview.  Please point me in the right direction if you know how to do this...</ul>\r\n    My plan for the next release is to include the &quot;expected&quot; soap response as part of a test case so that we can have an      automated way of running the test cases and comparing the actual with the expected soap response.<br>\r\n    <br>\r\n    ~Erik<br>\r\n    <div style=\"border-top-color:#aaaaaa;border-left-color:#aaaaaa;border-right-color:#aaaaaa;border-bottom-color:#aaaaaa;border-top-width:0.10em;border-left-width:0.10em;border-right-width:0.10em;border-bottom-width:0.10em;border-top-style:dotted;border-left-style:dotted;border-right-style:dotted;border-bottom-style:dotted;border-left-color:#000000;border-left-width:medium;border-left-style:none;border-right-color:#000000;border-right-width:medium;border-right-style:none;font-style:italic;margin-top:1em;margin-right:0em;margin-bottom:2.50em;margin-left:3em;padding-top:0.20em;padding-right:0.20em;padding-bottom:0.20em;padding-left:0.20em\"><br>\r\n    Enliven wrote:<br>\r\n    My compliments to you. This is an excellent start to a very worthwhile project and I believe it could be expanded to support some of the basic functionality of commercial SOAP/WS testing suites available from vendors like Parasoft and Crosscheck.<br>\r\n    <br>\r\n    Id like to make a few suggestions which would make Storm immediately more useful (in my desired development order):<br>\r\n    1) If an elements/attribute minOccurance == 0, allow specification (checkbox) to include the element/attribute or not, instead of just setting to null. This will allow for testing valid &amp; invalid requests.<br>\r\n    2) If an element/attribute is an array, allow addition of multiple values.<br>\r\n    3) Ability to populate a byte[] by reading bytes from a file<br>\r\n    4) Ability to open saved requests (currently allows saving).<br>\r\n    5) Better synchronization between &quot;treeview&quot; and Raw/XML view. Currently, the Raw/XML is only updated when you hit send. <br>\r\n    6) Ability to save/open multiple requests &quot;sets&quot;.<br>\r\n    7) Same as 4,6 for responses with added ability to check a request &quot;set&quot; against a saved response &quot;set&quot; (test cases).<br>\r\n    <br>\r\n    I will be looking at the source asap :)<br>\r\n    <br>\r\n    <br>\r\n    <br>\r\n    </div>\r\n    <br>\r\n",
    "PostedDate": "2008-06-10T19:44:57.193-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]